/**
 * Sistema de escrita de reports
 * Salva reports em múltiplos formatos conforme configuração
 */

import fs from 'fs';
import path from 'path';
import { getLogger } from './logger.js';

const logger = getLogger();
import type { Config } from '../config.js';

export interface ReportData {
  command: string;
  timestamp: string;
  input: any;
  result: any;
  metadata?: any;
}

/**
 * Salva um report nos formatos configurados
 */
export async function saveReport(
  config: Config,
  command: string,
  result: any,
  input?: any,
  metadata?: any
): Promise<void> {
  if (!config.reports?.enabled) {
    return;
  }

  const timestamp = new Date().toISOString();
  const reportData: ReportData = {
    command,
    timestamp,
    input: input || {},
    result,
    metadata
  };

  const outputDir = config.reports.outputDir || '.clia/reports';
  const baseFileName = `${command}-${timestamp.slice(0, 19).replace(/:/g, '-')}`;

  // Garantir que o diretório existe
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  // Salvar em cada formato configurado
  for (const format of config.reports.formats || ['json']) {
    const filePath = path.join(outputDir, `${baseFileName}.${format}`);
    
    if (format === 'json') {
      fs.writeFileSync(filePath, JSON.stringify(reportData, null, 2));
    } else if (format === 'markdown') {
      const markdownContent = generateMarkdownReport(reportData);
      fs.writeFileSync(filePath, markdownContent);
    }
  }

  // Limpar histórico se configurado
  if (config.reports.keepHistory && config.reports.keepHistory > 0) {
    await cleanupOldReports(outputDir, command, config.reports.keepHistory);
  }

  logger.info(` Report salvo em: ${outputDir}/${baseFileName}.*`);
}

/**
 * Gera um report em formato Markdown
 */
function generateMarkdownReport(data: ReportData): string {
  return `# ${data.command.toUpperCase()} Report

**Timestamp:** ${data.timestamp}

## Input
\`\`\`json
${JSON.stringify(data.input, null, 2)}
\`\`\`

## Result
\`\`\`json
${JSON.stringify(data.result, null, 2)}
\`\`\`

${data.metadata ? `## Metadata
\`\`\`json
${JSON.stringify(data.metadata, null, 2)}
\`\`\`
` : ''}
---
*Generated by CLIA v2.0.0*
`;
}

/**
 * Remove reports antigos mantendo apenas os N mais recentes
 */
async function cleanupOldReports(outputDir: string, command: string, keepCount: number): Promise<void> {
  try {
    const files = fs.readdirSync(outputDir)
      .filter(file => file.startsWith(`${command}-`))
      .map(file => ({
        name: file,
        path: path.join(outputDir, file),
        stat: fs.statSync(path.join(outputDir, file))
      }))
      .sort((a, b) => b.stat.mtime.getTime() - a.stat.mtime.getTime());

    // Remove files beyond keepCount
    for (let i = keepCount; i < files.length; i++) {
      fs.unlinkSync(files[i].path);
    }
  } catch (error) {
    logger.warn('  Erro ao limpar reports antigos:', error);
  }
}